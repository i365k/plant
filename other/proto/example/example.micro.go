// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/example/example.proto

/*
Package go_micro_srv_other is a generated protocol buffer package.

It is generated from these files:
	proto/example/example.proto

It has these top-level messages:
	Reward
	AchievementRequest
	AchievementResponse
	Box
	TreasureMap
	TreasureMapRequest
	TreasureMapResponse
	New
	PullNewRequest
	PullNewResponse
	LampRequest
	LampResponse
	LamplestRequest
	LamplestResponse
	StrengthRequest
	StrengthResponse
	StrelestRequest
	StrelestResponse
	DiamondRequest
	DiamondResponse
	DiamlestRequest
	DiamlestResponse
*/
package go_micro_srv_other

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Example service

type ExampleService interface {
	// 拉取邀请新人列表服务
	PullNew(ctx context.Context, in *PullNewRequest, opts ...client.CallOption) (*PullNewResponse, error)
	// 灯助力服务
	Lamp(ctx context.Context, in *LampRequest, opts ...client.CallOption) (*LampResponse, error)
	// 获取灯助力列表服务
	Lamplest(ctx context.Context, in *LamplestRequest, opts ...client.CallOption) (*LamplestResponse, error)
	// 体力卡包助力服务
	Strength(ctx context.Context, in *StrengthRequest, opts ...client.CallOption) (*StrengthResponse, error)
	// 获取体力助力列表服务
	Strelest(ctx context.Context, in *StrelestRequest, opts ...client.CallOption) (*StrelestResponse, error)
	// 钻石卡包助力服务
	Diamond(ctx context.Context, in *DiamondRequest, opts ...client.CallOption) (*DiamondResponse, error)
	// 获取钻石助力列表服务
	Diamlest(ctx context.Context, in *DiamlestRequest, opts ...client.CallOption) (*DiamlestResponse, error)
	// 获取钻石助力列表服务
	TreasureMap(ctx context.Context, in *TreasureMapRequest, opts ...client.CallOption) (*TreasureMapResponse, error)
	// 获取钻石助力列表服务
	Achievement(ctx context.Context, in *AchievementRequest, opts ...client.CallOption) (*AchievementResponse, error)
}

type exampleService struct {
	c    client.Client
	name string
}

func NewExampleService(name string, c client.Client) ExampleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.other"
	}
	return &exampleService{
		c:    c,
		name: name,
	}
}

func (c *exampleService) PullNew(ctx context.Context, in *PullNewRequest, opts ...client.CallOption) (*PullNewResponse, error) {
	req := c.c.NewRequest(c.name, "Example.PullNew", in)
	out := new(PullNewResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Lamp(ctx context.Context, in *LampRequest, opts ...client.CallOption) (*LampResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Lamp", in)
	out := new(LampResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Lamplest(ctx context.Context, in *LamplestRequest, opts ...client.CallOption) (*LamplestResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Lamplest", in)
	out := new(LamplestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Strength(ctx context.Context, in *StrengthRequest, opts ...client.CallOption) (*StrengthResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Strength", in)
	out := new(StrengthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Strelest(ctx context.Context, in *StrelestRequest, opts ...client.CallOption) (*StrelestResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Strelest", in)
	out := new(StrelestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Diamond(ctx context.Context, in *DiamondRequest, opts ...client.CallOption) (*DiamondResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Diamond", in)
	out := new(DiamondResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Diamlest(ctx context.Context, in *DiamlestRequest, opts ...client.CallOption) (*DiamlestResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Diamlest", in)
	out := new(DiamlestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) TreasureMap(ctx context.Context, in *TreasureMapRequest, opts ...client.CallOption) (*TreasureMapResponse, error) {
	req := c.c.NewRequest(c.name, "Example.TreasureMap", in)
	out := new(TreasureMapResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Achievement(ctx context.Context, in *AchievementRequest, opts ...client.CallOption) (*AchievementResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Achievement", in)
	out := new(AchievementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Example service

type ExampleHandler interface {
	// 拉取邀请新人列表服务
	PullNew(context.Context, *PullNewRequest, *PullNewResponse) error
	// 灯助力服务
	Lamp(context.Context, *LampRequest, *LampResponse) error
	// 获取灯助力列表服务
	Lamplest(context.Context, *LamplestRequest, *LamplestResponse) error
	// 体力卡包助力服务
	Strength(context.Context, *StrengthRequest, *StrengthResponse) error
	// 获取体力助力列表服务
	Strelest(context.Context, *StrelestRequest, *StrelestResponse) error
	// 钻石卡包助力服务
	Diamond(context.Context, *DiamondRequest, *DiamondResponse) error
	// 获取钻石助力列表服务
	Diamlest(context.Context, *DiamlestRequest, *DiamlestResponse) error
	// 获取钻石助力列表服务
	TreasureMap(context.Context, *TreasureMapRequest, *TreasureMapResponse) error
	// 获取钻石助力列表服务
	Achievement(context.Context, *AchievementRequest, *AchievementResponse) error
}

func RegisterExampleHandler(s server.Server, hdlr ExampleHandler, opts ...server.HandlerOption) error {
	type example interface {
		PullNew(ctx context.Context, in *PullNewRequest, out *PullNewResponse) error
		Lamp(ctx context.Context, in *LampRequest, out *LampResponse) error
		Lamplest(ctx context.Context, in *LamplestRequest, out *LamplestResponse) error
		Strength(ctx context.Context, in *StrengthRequest, out *StrengthResponse) error
		Strelest(ctx context.Context, in *StrelestRequest, out *StrelestResponse) error
		Diamond(ctx context.Context, in *DiamondRequest, out *DiamondResponse) error
		Diamlest(ctx context.Context, in *DiamlestRequest, out *DiamlestResponse) error
		TreasureMap(ctx context.Context, in *TreasureMapRequest, out *TreasureMapResponse) error
		Achievement(ctx context.Context, in *AchievementRequest, out *AchievementResponse) error
	}
	type Example struct {
		example
	}
	h := &exampleHandler{hdlr}
	return s.Handle(s.NewHandler(&Example{h}, opts...))
}

type exampleHandler struct {
	ExampleHandler
}

func (h *exampleHandler) PullNew(ctx context.Context, in *PullNewRequest, out *PullNewResponse) error {
	return h.ExampleHandler.PullNew(ctx, in, out)
}

func (h *exampleHandler) Lamp(ctx context.Context, in *LampRequest, out *LampResponse) error {
	return h.ExampleHandler.Lamp(ctx, in, out)
}

func (h *exampleHandler) Lamplest(ctx context.Context, in *LamplestRequest, out *LamplestResponse) error {
	return h.ExampleHandler.Lamplest(ctx, in, out)
}

func (h *exampleHandler) Strength(ctx context.Context, in *StrengthRequest, out *StrengthResponse) error {
	return h.ExampleHandler.Strength(ctx, in, out)
}

func (h *exampleHandler) Strelest(ctx context.Context, in *StrelestRequest, out *StrelestResponse) error {
	return h.ExampleHandler.Strelest(ctx, in, out)
}

func (h *exampleHandler) Diamond(ctx context.Context, in *DiamondRequest, out *DiamondResponse) error {
	return h.ExampleHandler.Diamond(ctx, in, out)
}

func (h *exampleHandler) Diamlest(ctx context.Context, in *DiamlestRequest, out *DiamlestResponse) error {
	return h.ExampleHandler.Diamlest(ctx, in, out)
}

func (h *exampleHandler) TreasureMap(ctx context.Context, in *TreasureMapRequest, out *TreasureMapResponse) error {
	return h.ExampleHandler.TreasureMap(ctx, in, out)
}

func (h *exampleHandler) Achievement(ctx context.Context, in *AchievementRequest, out *AchievementResponse) error {
	return h.ExampleHandler.Achievement(ctx, in, out)
}
