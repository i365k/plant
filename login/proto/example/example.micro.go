// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/example/example.proto

/*
Package go_micro_srv_login is a generated protocol buffer package.

It is generated from these files:
	proto/example/example.proto

It has these top-level messages:
	LoginRequest
	LoginResponse
	ConfigRequest
	ConfigResponse
	Config
	SceneData
	MassifData
	Crops
	AllProceeds
	GoldEnhancementData
	MoneyEnhancementData
	DiamondEnhancementData
	PlantDebris
	NewPeople
	SignIn
	FriendHelp
	PotFragments
	Prop
	RandomProp
	LuckDraw
	PotPrice
	Achievement
	Section
	AutoGold
	HarvestSkin
	Lamp
*/
package go_micro_srv_login

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Example service

type ExampleService interface {
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	Config(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
}

type exampleService struct {
	c    client.Client
	name string
}

func NewExampleService(name string, c client.Client) ExampleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.login"
	}
	return &exampleService{
		c:    c,
		name: name,
	}
}

func (c *exampleService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) Config(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Config", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Example service

type ExampleHandler interface {
	Login(context.Context, *LoginRequest, *LoginResponse) error
	Config(context.Context, *ConfigRequest, *ConfigResponse) error
}

func RegisterExampleHandler(s server.Server, hdlr ExampleHandler, opts ...server.HandlerOption) error {
	type example interface {
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		Config(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
	}
	type Example struct {
		example
	}
	h := &exampleHandler{hdlr}
	return s.Handle(s.NewHandler(&Example{h}, opts...))
}

type exampleHandler struct {
	ExampleHandler
}

func (h *exampleHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.ExampleHandler.Login(ctx, in, out)
}

func (h *exampleHandler) Config(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ExampleHandler.Config(ctx, in, out)
}
